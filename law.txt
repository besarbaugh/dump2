let LastTwoHoursLogs = AADProvisioningLogs_CL
    | where TimeGenerated > ago(2h);

let Last24HoursLogs = AADProvisioningLogs_CL
    | where TimeGenerated > ago(1d);

let Previous24HoursLogs = AADProvisioningLogs_CL
    | where TimeGenerated > ago(2d) and TimeGenerated <= ago(1d);

let Last24HoursFailures = Last24HoursLogs
    | where Status == "Failure"
    | summarize TotalFailures = count() by bin(TimeGenerated, 1h);

let Previous24HoursFailures = Previous24HoursLogs
    | where Status == "Failure"
    | summarize TotalFailures = count() by bin(TimeGenerated, 1h);

let JoinedData = Last24HoursFailures
    | join kind=inner (Previous24HoursFailures) on TimeGenerated
    | extend FailureIncreasePercentage = ((TotalFailures - TotalFailures1) * 100.0) / TotalFailures1
    | where FailureIncreasePercentage >= 100;

LastTwoHoursLogs
| union JoinedData
| summarize TotalLogs = count() by bin(TimeGenerated, 15m)
| where TotalLogs == 0


----------------------------------------------------------------------------------------------------------

let LastTwoHoursLogs = AADProvisioningLogs_CL
    | where TimeGenerated > ago(2h);

let Last24HoursLogs = AADProvisioningLogs_CL
    | where TimeGenerated > ago(1d);

let Previous24HoursLogs = AADProvisioningLogs_CL
    | where TimeGenerated > ago(2d) and TimeGenerated <= ago(1d);

let Last24HoursFailures = Last24HoursLogs
    | where Status == "Failure"
    | summarize TotalFailures = count() by bin(TimeGenerated, 1h);

let Previous24HoursFailures = Previous24HoursLogs
    | where Status == "Failure"
    | summarize TotalFailures = count() by bin(TimeGenerated, 1h);

let JoinedData = Last24HoursFailures
    | join kind=inner (Previous24HoursFailures) on TimeGenerated
    | extend FailureIncreasePercentage = ((TotalFailures - TotalFailures1) * 100.0) / TotalFailures1
    | where FailureIncreasePercentage >= 100;

let NoLogsData = LastTwoHoursLogs
    | summarize TotalLogs = count() by bin(TimeGenerated, 15m)
    | where TotalLogs == 0;

union JoinedData, NoLogsData
| project TimeGenerated, Type = iif(isnotempty(FailureIncreasePercentage), "FailureIncrease", "NoLogs")




-------------------



let LastTwoHours = now() - 2h;
let Today = trunc(now(), 1d);
let Yesterday = Today - 1d;
let TodayFailures = toscalar(
    AADProvisioningLogs_CL
    | where TimeGenerated >= Today
    | where Status == "Failure"
    | count
);
let YesterdayFailures = toscalar(
    AADProvisioningLogs_CL
    | where TimeGenerated >= Yesterday and TimeGenerated < Today
    | where Status == "Failure"
    | count
);
let IncreasePercentage = ((TodayFailures - YesterdayFailures) * 100.0) / YesterdayFailures;
let NoLogsCondition = 
    AADProvisioningLogs_CL
    | where TimeGenerated >= LastTwoHours
    | summarize TotalLogs = count() by bin(TimeGenerated, 15m)
    | where TotalLogs == 0;

let IncreaseInFailuresCondition =
    AADProvisioningLogs_CL
    | extend IncreasePercentage = todouble(round(IncreasePercentage, 2))
    | project IncreasePercentage
    | where IncreasePercentage >= 100;

union NoLogsCondition, IncreaseInFailuresCondition
| summarize Trigger = iff(count() > 0, true, false)




-------------------------------


let Last24Hours = now() - 24h;
let Previous24Hours = Last24Hours - 24h;
let TodayFailures = toscalar(
    AADProvisioningLogs
    | where TimeGenerated >= Last24Hours
    | where Status == "Failure"
    | count
);
let YesterdayFailures = toscalar(
    AADProvisioningLogs
    | where TimeGenerated >= Previous24Hours and TimeGenerated < Last24Hours
    | where Status == "Failure"
    | count
);
let IncreasePercentage = ((TodayFailures - YesterdayFailures) * 100.0) / YesterdayFailures;

let NoLogsData = 
    AADProvisioningLogs
    | where TimeGenerated >= Last24Hours
    | summarize TotalLogs = count()
    | project Type = "NoLogs";

let IncreaseInFailuresData =
    AADProvisioningLogs
    | where TimeGenerated >= Last24Hours
    | extend IncreasePercentage = todouble(round(IncreasePercentage, 2))
    | project Type = "IncreaseInFailures", IncreasePercentage;

union NoLogsData, IncreaseInFailuresData
| project Trigger = count() > 0
