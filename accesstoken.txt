$accessToken = Invoke-RestMethod -Method Get -Headers @{'Metadata'='true'} `
  -Uri "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://graph.microsoft.com" `
  | Select-Object -ExpandProperty access_token


$userProfile = Invoke-RestMethod -Method Get `
  -Headers @{'Authorization'="Bearer $accessToken"} `
  -Uri "https://graph.microsoft.com/v1.0/me"



function Get-AccessToken {
    param (
        [string]$resourceURI = "https://graph.microsoft.com"
    )

    $AzureContext = (Get-AzContext).Account
    $token = $AzureContext.GetAccessToken($resourceURI)

    return $token.Token
}

$accessToken = Get-AccessToken
$authHeader = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $accessToken"
}

$graphEndpoint = "https://graph.microsoft.com/v1.0/domains"
$response = Invoke-RestMethod -Method GET -Uri $graphEndpoint -Headers $authHeader
$response.value




$domainId = "<domain_id>" # Replace with the domain id of the domain you want to update
$updateGraphEndpoint = "https://graph.microsoft.com/v1.0/domains/$domainId"

$body = @{
    isDefault = $true # Set to true or false depending on your requirement
} | ConvertTo-Json

Invoke-RestMethod -Method PATCH -Uri $updateGraphEndpoint -Headers $authHeader -Body $body


function Get-AccessToken {
    param (
        [string]$resourceURI = "https://graph.microsoft.com"
    )

    $AzureContext = (Get-AzContext).Account
    $token = $AzureContext.GetAccessToken($resourceURI)

    return $token.Token
}

$accessToken = Get-AccessToken
$authHeader = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $accessToken"
}

$graphEndpoint = "https://graph.microsoft.com/v1.0/domains"
$response = Invoke-RestMethod -Method GET -Uri $graphEndpoint -Headers $authHeader
$response.value


------------------


# Get the credentials from the encrypted automation variable
$credentials = Get-AutomationPSCredential -Name "your-automation-variable-name"

# Define the required variables
$tenantId = "your-tenant-id"
$scope = "https://graph.microsoft.com/.default"
$username = $credentials.UserName
$password = $credentials.GetNetworkCredential().Password

# Authenticate with Azure AD and get an access token for the Microsoft Graph API
Connect-AzureAD -Credential $credentials
$accessToken = (Get-AzureADAccessToken -ResourceUrl "https://graph.microsoft.com" -Scope $scope).AccessToken

# Use the acquired token to make REST API calls to the Microsoft Graph API or any other API that requires authentication
$authHeader = @{
    'Authorization' = "Bearer $accessToken"
    'Content-Type' = 'application/json'
}

$domainFederationUrl = "https://graph.microsoft.com/v1.0/domains/federationSettings"
$domainFederationResult = Invoke-RestMethod -Uri $domainFederationUrl -Headers $authHeader -Method Get
$domainFederationResult


---------------------


# Get the credentials from the encrypted automation variable
$credentials = Get-AutomationPSCredential -Name "your-automation-variable-name"

# Define the required variables
$tenantId = "your-tenant-id"
$scope = "https://graph.microsoft.com/.default"
$username = $credentials.UserName
$password = $credentials.GetNetworkCredential().Password

# Authenticate with Azure AD and get an access token for the Microsoft Graph API
Connect-AzureAD -Credential $credentials
$accessToken = (Get-AzureADAccessToken -ResourceUrl "https://graph.microsoft.com" -Scope $scope).AccessToken

# Use the acquired token to make REST API calls to the Microsoft Graph API or any other API that requires authentication
$authHeader = @{
    'Authorization' = "Bearer $accessToken"
    'Content-Type' = 'application/json'
}

$domainFederationUrl = "https://graph.microsoft.com/v1.0/domains/federationSettings"
$domainFederationResult = Invoke-RestMethod -Uri $domainFederationUrl -Headers $authHeader -Method Get
$domainFederationResult

-----------------------------------------------

# Get the credentials from the encrypted automation variable
$credentials = Get-AutomationPSCredential -Name "your-automation-variable-name"

# Define the required variables
$tenantId = "your-tenant-id"
$scope = "https://graph.microsoft.com/.default"
$username = $credentials.UserName
$password = $credentials.GetNetworkCredential().Password
$tokenEndpoint = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"

# Create the request body with grant type, scope, username, and password
$body = @{
    'grant_type' = 'password'
    'scope' = $scope
    'username' = $username
    'password' = $password
}

# Make the request to the token endpoint to obtain an access token
$tokenResponse = Invoke-RestMethod -Uri $tokenEndpoint -Method Post -Body $body

# Extract the access token from the token response
$accessToken = $tokenResponse.access_token

# Use the acquired token to make REST API calls to the Microsoft Graph API or any other API that requires authentication
$authHeader = @{
    'Authorization' = "Bearer $accessToken"
    'Content-Type' = 'application/json'
}

$domainFederationUrl = "https://graph.microsoft.com/v1.0/domains/federationSettings"
$domainFederationResult = Invoke-RestMethod -Uri $domainFederationUrl -Headers $authHeader -Method Get
$domainFederationResult




