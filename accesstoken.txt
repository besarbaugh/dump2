$managedIdentity = Get-AzureADServicePrincipal -ObjectId "<ManagedIdentityObjectId>"

$graphAppRoleId = (Get-AzureADServicePrincipal -SearchString "Microsoft Graph").AppRoles[0].Id
$graphPermissionGrants = Get-AzureADServiceAppRoleAssignment -ObjectId $managedIdentity.ObjectId -All $true | Where-Object { $_.ResourceId -eq "https://graph.microsoft.com" -and $_.AppRoleId -eq $graphAppRoleId }

foreach ($graphPermissionGrant in $graphPermissionGrants) {
    Remove-AzureADServiceAppRoleAssignment -ObjectId $graphPermissionGrant.ObjectId
}




$automationEndpoint = $env:IDENTITY_ENDPOINT
$automationToken = $env:IDENTITY_HEADER

$resource = "https://graph.microsoft.com"

$tokenAuthURI = "$($automationEndpoint)?resource=$resource&api-version=2019-08-01"
$tokenResponse = Invoke-RestMethod -Method Get -Headers @{ 'Secret' = $automationToken } -Uri $tokenAuthURI
$accessToken = $tokenResponse.access_token


-----------------------------------------
$DomainName = "<your-domain-name>"
$FederationSettings = @{
    issuer = "<your-issuer-uri>"
    loginEndpoint = "<your-passive-logon-uri>"
    logoutEndpoint = "<your-logout-endpoint-uri>" # Optional
    signingCertificate = "<your-base64-encoded-certificate>"
    metadataExchangeEndpoint = "<your-metadata-exchange-endpoint-uri>" # Optional
} | ConvertTo-Json

$GraphApiUrl = "https://graph.microsoft.com/v1.0/domains/$DomainName"
$Headers = @{
    'Authorization' = "Bearer $AccessToken"
    'Content-Type' = 'application/json'
}

$Body = @{
    authenticationType = "Federated"
    federatedDomainSettings = $FederationSettings
} | ConvertTo-Json

# Send the request to update the domain's authentication settings
$Response = Invoke-RestMethod -Uri $GraphApiUrl -Method PATCH -Headers $Headers -Body $Body



---------------------------------------------------------
# Replace with your access token
$accessToken = "<your_access_token_here>"

# Split the JWT into its parts
$jwtParts = $accessToken.Split('.')

# Get the payload (the middle part)
$base64UrlPayload = $jwtParts[1]

# Convert Base64Url to Base64
$base64Payload = $base64UrlPayload.Replace('-', '+').Replace('_', '/')
$paddingLength = 4 - ($base64Payload.Length % 4)
if ($paddingLength -ne 4) {
    $base64Payload = $base64Payload.PadRight($base64Payload.Length + $paddingLength, '=')
}

# Base64 decode the payload
$decodedPayloadBytes = [System.Convert]::FromBase64String($base64Payload)
$decodedPayload = [System.Text.Encoding]::UTF8.GetString($decodedPayloadBytes)

# Display the decoded payload
Write-Host "Decoded Payload:"
Write-Host $decodedPayload



----------------------

# Retrieve the access token using one of the methods described earlier
$accessToken = "YOUR_ACCESS_TOKEN"

# Set the Graph API endpoint and query string
$graphEndpoint = "https://graph.microsoft.com/v1.0/identity/conditionalAccess/policies"
$queryString = "?$filter=conditions.appliedConditionalAccessPolicies.claims.matchedClaims.value eq 'Federated'"

# Set the request headers
$headers = @{
    Authorization = "Bearer $accessToken"
}

# Make the Graph API request to retrieve the conditional access policies
$response = Invoke-RestMethod -Method Get -Uri "$graphEndpoint$queryString" -Headers $headers

# Extract the federated domain information from the response
$federatedDomains = $response.conditions.appliedConditionalAccessPolicies.claims.matchedClaims.additionalProperties.values | Where-Object { $_.type -eq "Federated" }





# Connect to Azure AD using the stored credentials
$creds = Get-AutomationPSCredential -Name "user123"
Connect-AzureAD -Credential $creds

# Get the domain name for which you want to retrieve federation settings
$domain = "example.com"

# Get the domain object ID using the Microsoft Graph API
$domainObj = Invoke-RestMethod -Method Get -Uri "https://graph.microsoft.com/v1.0/domains?$filter=verifiedDomains/any(x:x/Name eq '$domain')" -Headers @{Authorization = "Bearer $((Get-AzureADAccessToken).AccessToken)"}

# Get the federation settings using the Microsoft Graph API
$federationSettings = Invoke-RestMethod -Method Get -Uri "https://graph.microsoft.com/v1.0/domains/$($domainObj.id)/domainFederationSettings" -Headers @{Authorization = "Bearer $((Get-AzureADAccessToken).AccessToken)"}

# Output the federation settings
$federationSettings

-----------------------
# Get the username and password from your Azure Automation account
$username = "<your-username>"
$password = Get-AutomationVariable -Name "your-password-name" | ConvertTo-SecureString -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential ($username, $password)

# Construct the authorization header
$encodedCredential = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($credential.UserName + ":" + $credential.GetNetworkCredential().Password))
$authHeader = @{
    Authorization = "Basic $encodedCredential"
}

# Construct the token request body
$body = @{
    grant_type = "password"
    scope = "https://graph.microsoft.com/.default"
    username = $credential.UserName
    password = $credential.GetNetworkCredential().Password
}

# Make the token request to obtain an access token
$tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/<your-tenant-id>/oauth2/v2.0/token" -Method POST -Headers $authHeader -Body $body

# Extract the access token from the response
$accessToken = $tokenResponse.access_token


------------------------------------

$accessToken = Invoke-RestMethod -Method Get -Headers @{'Metadata'='true'} `
  -Uri "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://graph.microsoft.com" `
  | Select-Object -ExpandProperty access_token


$userProfile = Invoke-RestMethod -Method Get `
  -Headers @{'Authorization'="Bearer $accessToken"} `
  -Uri "https://graph.microsoft.com/v1.0/me"



function Get-AccessToken {
    param (
        [string]$resourceURI = "https://graph.microsoft.com"
    )

    $AzureContext = (Get-AzContext).Account
    $token = $AzureContext.GetAccessToken($resourceURI)

    return $token.Token
}

$accessToken = Get-AccessToken
$authHeader = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $accessToken"
}

$graphEndpoint = "https://graph.microsoft.com/v1.0/domains"
$response = Invoke-RestMethod -Method GET -Uri $graphEndpoint -Headers $authHeader
$response.value




$domainId = "<domain_id>" # Replace with the domain id of the domain you want to update
$updateGraphEndpoint = "https://graph.microsoft.com/v1.0/domains/$domainId"

$body = @{
    isDefault = $true # Set to true or false depending on your requirement
} | ConvertTo-Json

Invoke-RestMethod -Method PATCH -Uri $updateGraphEndpoint -Headers $authHeader -Body $body


function Get-AccessToken {
    param (
        [string]$resourceURI = "https://graph.microsoft.com"
    )

    $AzureContext = (Get-AzContext).Account
    $token = $AzureContext.GetAccessToken($resourceURI)

    return $token.Token
}

$accessToken = Get-AccessToken
$authHeader = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $accessToken"
}

$graphEndpoint = "https://graph.microsoft.com/v1.0/domains"
$response = Invoke-RestMethod -Method GET -Uri $graphEndpoint -Headers $authHeader
$response.value


------------------


# Get the credentials from the encrypted automation variable
$credentials = Get-AutomationPSCredential -Name "your-automation-variable-name"

# Define the required variables
$tenantId = "your-tenant-id"
$scope = "https://graph.microsoft.com/.default"
$username = $credentials.UserName
$password = $credentials.GetNetworkCredential().Password

# Authenticate with Azure AD and get an access token for the Microsoft Graph API
Connect-AzureAD -Credential $credentials
$accessToken = (Get-AzureADAccessToken -ResourceUrl "https://graph.microsoft.com" -Scope $scope).AccessToken

# Use the acquired token to make REST API calls to the Microsoft Graph API or any other API that requires authentication
$authHeader = @{
    'Authorization' = "Bearer $accessToken"
    'Content-Type' = 'application/json'
}

$domainFederationUrl = "https://graph.microsoft.com/v1.0/domains/federationSettings"
$domainFederationResult = Invoke-RestMethod -Uri $domainFederationUrl -Headers $authHeader -Method Get
$domainFederationResult


---------------------


# Get the credentials from the encrypted automation variable
$credentials = Get-AutomationPSCredential -Name "your-automation-variable-name"

# Define the required variables
$tenantId = "your-tenant-id"
$scope = "https://graph.microsoft.com/.default"
$username = $credentials.UserName
$password = $credentials.GetNetworkCredential().Password

# Authenticate with Azure AD and get an access token for the Microsoft Graph API
Connect-AzureAD -Credential $credentials
$accessToken = (Get-AzureADAccessToken -ResourceUrl "https://graph.microsoft.com" -Scope $scope).AccessToken

# Use the acquired token to make REST API calls to the Microsoft Graph API or any other API that requires authentication
$authHeader = @{
    'Authorization' = "Bearer $accessToken"
    'Content-Type' = 'application/json'
}

$domainFederationUrl = "https://graph.microsoft.com/v1.0/domains/federationSettings"
$domainFederationResult = Invoke-RestMethod -Uri $domainFederationUrl -Headers $authHeader -Method Get
$domainFederationResult

-----------------------------------------------

# Get the credentials from the encrypted automation variable
$credentials = Get-AutomationPSCredential -Name "your-automation-variable-name"

# Define the required variables
$tenantId = "your-tenant-id"
$scope = "https://graph.microsoft.com/.default"
$username = $credentials.UserName
$password = $credentials.GetNetworkCredential().Password
$tokenEndpoint = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"

# Create the request body with grant type, scope, username, and password
$body = @{
    'grant_type' = 'password'
    'scope' = $scope
    'username' = $username
    'password' = $password
}

# Make the request to the token endpoint to obtain an access token
$tokenResponse = Invoke-RestMethod -Uri $tokenEndpoint -Method Post -Body $body

# Extract the access token from the token response
$accessToken = $tokenResponse.access_token

# Use the acquired token to make REST API calls to the Microsoft Graph API or any other API that requires authentication
$authHeader = @{
    'Authorization' = "Bearer $accessToken"
    'Content-Type' = 'application/json'
}

$domainFederationUrl = "https://graph.microsoft.com/v1.0/domains/federationSettings"
$domainFederationResult = Invoke-RestMethod -Uri $domainFederationUrl -Headers $authHeader -Method Get
$domainFederationResult






