try {
    # Check if Service Principal exists
    $spnCheckUrl = "https://graph.microsoft.com/v1.0/servicePrincipals?$filter=appId eq '$spnObjectId'"
    $spnResponse = Invoke-WebRequest -Method Get -Uri $spnCheckUrl -Headers @{ Authorization = "$AuthHeader" } -ContentType "application/json" -ErrorAction Stop

    if ($spnResponse.StatusCode -ne 200 -or ($spnResponse.Content | ConvertFrom-Json).value.Count -eq 0) {
        $message = "Service Principal with Object ID $spnObjectId does not exist."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $logFile -Severity 'ERR'
        throw $message
    }

    # Check if Role Assignment already exists
    $roleCheckUrl = "$roleAssignmentsUrl?$filter=principalId eq '$spnObjectId' and roleDefinitionId eq '$RoleDefinitionId' and scope eq '$scopeId'"
    $roleCheckResponse = Invoke-WebRequest -Method Get -Uri $roleCheckUrl -Headers @{ Authorization = "$AuthHeader" } -ContentType "application/json" -ErrorAction Stop

    if ($roleCheckResponse.StatusCode -eq 200 -and ($roleCheckResponse.Content | ConvertFrom-Json).value.Count -gt 0) {
        $message = "Role assignment for Service Principal $spnObjectId with Role Definition ID $RoleDefinitionId at Scope $scopeId already exists."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $logFile -Severity 'ERR'
        throw $message
    }

    # Create the role assignment
    $response = Invoke-WebRequest -Method Put -Uri $url -Body $jsonBody -Headers @{ Authorization = "$AuthHeader" } -ContentType "application/json" -Verbose
    $statuscode = $response.StatusCode

    if ($statuscode -eq 201) {
        $message = "Assigned 'User Access Administrator' role to SPN: $spnObjectId for Scope: $scopeId. End Date: $endDate"
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $logFile -Severity 'INF'
    } else {
        $message = "Unexpected response code ($statuscode) when assigning role. Check details."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $logFile -Severity 'ERR'
        throw $message
    }
}
catch {
    $message = "Failed to assign 'User Access Administrator' role to SPN: $spnObjectId for Scope: $scopeId. End Date: $endDate"
    Write-Host $message
    Write-Host $_.Exception.Message
    Write-LogOutput -Message $message -LogFile $logFile -Severity 'ERR'
    Write-LogOutput -Message $_.Exception.Message -LogFile $logFile -Severity 'ERR'
}
