try {
    # Check if Service Principal exists
    $spnCheckUrl = "https://graph.microsoft.com/v1.0/servicePrincipals/$spnObjectId"
    $spnResponse = Invoke-WebRequest -Method Get -Uri $spnCheckUrl -Headers @{ Authorization = "Bearer $AuthToken" } -ContentType "application/json" -ErrorAction Stop

    if ($spnResponse.StatusCode -ne 200) {
        $message = "Service Principal with Object ID $spnObjectId does not exist."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'WRN'
        return
    }

    # Check if Role Assignment already exists
    $roleAssignmentCheckUrl = "$roleAssignmentsUrl?$filter=principalId eq '$spnObjectId' and roleDefinitionId eq '$RoleDefinitionId' and scope eq '$scopeId'"
    $assignmentResponse = Invoke-WebRequest -Method Get -Uri $roleAssignmentCheckUrl -Headers @{ Authorization = "Bearer $AuthToken" } -ContentType "application/json" -ErrorAction Stop

    if ($assignmentResponse.StatusCode -eq 200 -and ($assignmentResponse.Content | ConvertFrom-Json).value.Count -gt 0) {
        $message = "Role assignment for Service Principal $spnObjectId at Scope $scopeId already exists."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'WRN'
        return
    }

    # Call the Azure Management API to assign the role
    $response = Invoke-WebRequest -Method Put -Uri $url -Body $jsonBody -Headers @{ Authorization = "Bearer $AuthToken" } -ContentType "application/json" -ErrorAction Stop

    if ($response.StatusCode -eq 201) {
        $message = "Successfully assigned role for Service Principal $spnObjectId at Scope $scopeId."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'INF'
    }
} 
catch {
    if ($_.Exception.Response -and $_.Exception.Response.StatusCode -eq 409) {
        $message = "Role assignment for Service Principal $spnObjectId at Scope $scopeId already exists."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'WRN'
    } elseif ($_.Exception.Response -and $_.Exception.Response.StatusCode -eq 401) {
        $message = "Unauthorized to assign role for Service Principal $spnObjectId. Check permissions or token."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'ERR'
    } else {
        $message = "Failed to assign role for Service Principal $spnObjectId at Scope $scopeId. Error: $($_.Exception.Message)"
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'ERR'
    }
}



======


try {
    # Check if Service Principal exists
    $spnCheckUrl = "https://graph.microsoft.com/v1.0/servicePrincipals/$spnObjectId"
    $spnResponse = Invoke-WebRequest -Method Get -Uri $spnCheckUrl -Headers @{ Authorization = "Bearer $AuthToken" } -ContentType "application/json" -ErrorAction Stop

    if ($spnResponse.StatusCode -ne 200) {
        $message = "Service Principal with Object ID $spnObjectId does not exist."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'WRN'
        return
    }

    # Attempt to delete the role assignment
    $deleteResponse = Invoke-WebRequest -Method Delete -Uri $url -Headers @{ Authorization = "Bearer $AuthToken" } -ErrorAction Stop

    if ($deleteResponse.StatusCode -eq 204) {
        $message = "Successfully removed role assignment for Service Principal $spnObjectId at Scope $scopeId."
        Write-Host $message
        Write-LogOutput -Message $message -LogFile $LogFile -Severity 'INF'
    }
} 
catch {
    if ($_.Exception.Response -and $_.Exception.Response.StatusCode -eq 404) {
        $message = "Role assignment for Service Principal $spnObjectId with Role Definition ID $RoleDefinitionId at Scope $scopeId does not exist."
        Write-Host
